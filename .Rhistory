(substring(toupper(my_data[min(which(!is.na(my_data[,i]))),i]), 1, 1) == "A")) {
temp$amazon_merchant_id <- my_data[,i]
} else {
}
}
## IDENTIFY AND ASSIGN country ##
for (i in 1: length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>2) & (col_char_len[i]<3)){
temp$country <- my_data[,i]
} else{
}
}
head(temp)
while(cond == TRUE){
for (i in 1:length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>13) & (col_char_len[i]<14) &
(substring(toupper(my_data[min(which(!is.na(my_data[,i]))),i]), 1, 1) == "A")) {
temp$amazon_merchant_id <- my_data[,i]
cond <- FALSE
} else {
}
}
}
cond <- TRUE
while(cond == TRUE){
for (i in 1:length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>13) & (col_char_len[i]<14) &
(substring(toupper(my_data[min(which(!is.na(my_data[,i]))),i]), 1, 1) == "A")) {
temp$amazon_merchant_id <- my_data[,i]
cond <- FALSE
} else {
}
}
}
cond <- TRUE
while(cond == TRUE){
for (i in 1:length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>13) & (col_char_len[i]<14) &
(substring(toupper(my_data[min(which(!is.na(my_data[,i]))),i]), 1, 1) == "A")) {
temp$amazon_merchant_id <- my_data[,i]
print(1)
cond <- FALSE
} else {
print(2)
}
}
}
num_at <- c()
for (i in 1:ncol(my_data)){
num_at[i] <- table(str_detect(my_data[,i], "@"))["TRUE"]
}
install.packages("stringr")
library(stringr)
num_at <- c()
for (i in 1:ncol(my_data)){
num_at[i] <- table(str_detect(my_data[,i], "@"))["TRUE"]
}
num_at
which(max(num_at))
(max(num_at)
max(num_at)
max(num_at)
max(!is.na(num_at))
which.max(num_at)
library(stringr)
## CONTACT UPDATE AMAZON##
##READ FILE##
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
##CREATE EMPTY DF##
temp <- data.frame(matrix("", ncol = 9, nrow = nrow(my_data)))
##ASSIGN COLNAMES##
colnames(temp) <- c("amazon_merchant_id", "country", "first_name", "last_name", "email", "phone",
"agent_signature", "contact_details_update", "status")
## FIND AVG nchar in each column ##
col_char_len <- c()
find_mean <- function(data){
for (i in 1:ncol(data))
col_char_len[i] <- mean(nchar(as.character(data[,i])), na.rm = TRUE)
return(col_char_len)
}
col_char_len <- find_mean(my_data)
## INDENTIFY AND ASSIGN amazon_merchant_id ##
for (i in 1:length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>13) & (col_char_len[i]<14) &
(substring(toupper(my_data[min(which(!is.na(my_data[,i]))),i]), 1, 1) == "A")) {
temp$amazon_merchant_id <- my_data[,i]
print(1)
cond <- FALSE
} else {
print(2)
}
}
## IDENTIFY AND ASSIGN country ##
for (i in 1: length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>2) & (col_char_len[i]<3)){
temp$country <- my_data[,i]
} else{
}
}
## IDENTIFY AND ASSIGN email ##
num_at <- c()
for (i in 1:ncol(my_data)){
num_at[i] <- table(str_detect(my_data[,i], "@"))["TRUE"]
}
temp$email <- my_data[,which.max(num_at)]
head(temp)
my_data <- gsub('\\(at\\)', '@', my_data)
library(stringr)
## CONTACT UPDATE AMAZON##
##READ FILE##
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
##CREATE EMPTY DF##
temp <- data.frame(matrix("", ncol = 9, nrow = nrow(my_data)))
##ASSIGN COLNAMES##
colnames(temp) <- c("amazon_merchant_id", "country", "first_name", "last_name", "email", "phone",
"agent_signature", "contact_details_update", "status")
## FIND AVG nchar in each column ##
col_char_len <- c()
find_mean <- function(data){
for (i in 1:ncol(data))
col_char_len[i] <- mean(nchar(as.character(data[,i])), na.rm = TRUE)
return(col_char_len)
}
col_char_len <- find_mean(my_data)
## INDENTIFY AND ASSIGN amazon_merchant_id ##
for (i in 1:length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>13) & (col_char_len[i]<14) &
(substring(toupper(my_data[min(which(!is.na(my_data[,i]))),i]), 1, 1) == "A")) {
temp$amazon_merchant_id <- my_data[,i]
print(1)
cond <- FALSE
} else {
print(2)
}
}
## IDENTIFY AND ASSIGN country ##
for (i in 1: length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>2) & (col_char_len[i]<3)){
temp$country <- my_data[,i]
} else{
}
}
email_repair <- function(my_data){
data <- gsub('\\(at\\)', '@', my_data)
idx <- grepl( "^[^@]+@[^@]+\\.", my_data)
data[!idx] <- ""
return(data)
}
## IDENTIFY AND ASSIGN email ##
my_data <- gsub('\\(at\\)', '@', my_data)
num_at <- c()
for (i in 1:ncol(my_data)){
num_at[i] <- table(str_detect(my_data[,i], "@"))["TRUE"]
}
temp$email <- my_data[,which.max(num_at)]
head(temp)
library(stringr)
##READ FILE##
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
my_data <- gsub('\\(at\\)', '@', my_data)
my_data
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
my_data <- gsub('\\(at\\)', '@', my_data)
head(my_data)
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
#my_data <- gsub('\\(at\\)', '@', my_data)
head(my_data)
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
for (i in 1:ncol(my_data)){
my_data[,i] <- gsub('\\(at\\)', '@', my_data[,i])
}
head(my_data)
library(stringr)
## CONTACT UPDATE AMAZON##
##READ FILE##
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
for (i in 1:ncol(my_data)){
my_data[,i] <- gsub('\\(at\\)', '@', my_data[,i])
}
head(my_data)
##CREATE EMPTY DF##
temp <- data.frame(matrix("", ncol = 9, nrow = nrow(my_data)))
##ASSIGN COLNAMES##
colnames(temp) <- c("amazon_merchant_id", "country", "first_name", "last_name", "email", "phone",
"agent_signature", "contact_details_update", "status")
## FIND AVG nchar in each column ##
col_char_len <- c()
find_mean <- function(data){
for (i in 1:ncol(data))
col_char_len[i] <- mean(nchar(as.character(data[,i])), na.rm = TRUE)
return(col_char_len)
}
col_char_len <- find_mean(my_data)
## INDENTIFY AND ASSIGN amazon_merchant_id ##
for (i in 1:length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>13) & (col_char_len[i]<14) &
(substring(toupper(my_data[min(which(!is.na(my_data[,i]))),i]), 1, 1) == "A")) {
temp$amazon_merchant_id <- my_data[,i]
print(1)
cond <- FALSE
} else {
print(2)
}
}
## IDENTIFY AND ASSIGN country ##
for (i in 1: length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>2) & (col_char_len[i]<3)){
temp$country <- my_data[,i]
} else{
}
}
## IDENTIFY AND ASSIGN email ##
num_at <- c()
for (i in 1:ncol(my_data)){
num_at[i] <- table(str_detect(my_data[,i], "@"))["TRUE"]
}
temp$email <- my_data[,which.max(num_at)]
head(temp)
string<-c("sfasdgshas23452352")
as.numeric(string)
temp2 <- gregexpr("[0-9]+", l)
string<-c("sfasdgsh45as23452352")
string<-c("sfasdgsh45as23452352")
temp2 <- gregexpr("[0-9]+", string)
as.numeric(unique(unlist(regmatches(string, temp2)))
string<-c("sfasdgsh45as23452352")
temp2 <- gregexpr("[0-9]+", string)
as.numeric(unique(unlist(regmatches(string, temp2)))
string <- c("sfasdgsh45as23452352")
temp2 <- gregexpr("[0-9]+", string)
as.numeric(unique(unlist(regmatches(string, temp2)))
string <- c("sfasdgsh45as23452352")
temp2 <- gregexpr("[0-9]+", string)
as.numeric(unlist(regmatches(string, temp2))
string <- c("sfasdgsh45as23452352")
library(PogromcyDanych)
(srednia<-mean(auta2012$Przebieg.w.km, na.rm=TRUE))
barplot(srednia)
(srednie<-tapply(auta2012$Przebieg.w.km, auta2012$Rodzaj.paliwa, mean, na.rm = TRUE))
barplot(srednie, las=2)
boxplot(auta2012$Przebieg.w.km, horizontal = TRUE, range = 0)
auta2012wybrane<-auta2012[auta2012$Przebieg.w.km<1000000,]
summary(auta2012wybrane)
boxplot(auta2012wybrane$Przebieg.w.km, horizontal = TRUE, range = 0)
hist(auta2012wybrane$Przebieg.w.km, col="grey")
hist(auta2012wybrane$Przebieg.w.km, breaks = 100, col="grey")
plot(koty_ptaki$waga, koty_ptaki$predkosc, ylab = "Predkosc", xlab = "Waga")
plot(auta2012wybrane$Przebieg.w.km, auta2012wybrane$Cena, log = "xy", pch=".")
boxplot(auta2012wybrane$Cena)
boxplot(auta2012wybrane$Cena, horizontal = TRUE, range = 0)
hist(auta2012wybrane$Cena, break=100, col = "grey")
hist(auta2012wybrane$Cena, break=100, col="grey")
hist(auta2012wybrane$Cena, breaks=100, col="grey")
auta2012wybrane<- auta2012[auta2012$Cena.w.PLN < 1000000,]
boxplot(auta2012wybrane$Cena.w.PLN, horizontal = TRUE, range = 0)
auta2012wybrane<- auta2012[auta2012$Cena.w.PLN < 100000,]
boxplot(auta2012wybrane$Cena.w.PLN, horizontal = TRUE, range = 0)
hist(auta2012wybrane$Cena, breaks=100, col="grey")
hist(auta2012wybrane$Cena, breaks=50, col="grey")
hist(auta2012wybrane$Cena.w.PLN, breaks=50, col="grey")
glimpse(auta2012)
levels(auta2012$Waluta)
summary(auta2012$Waluta)
table(auta2012)
table(auta2012$Waluta)
waluty<-table(auta2012$Waluta)
prop.table(waluty)
round(100*(prop.table(waluty)), digits = 1)
sort(round(100*(prop.table(waluty)), digits = 1))
sort(round(100*(prop.table(waluty)), digits = 1), decreasing=TRUE)
table(auta2012$Marka)
names(which.max(table(auta2012$Marka)))
which.max(table(auta2012$Marka))
table(auta2012$Rodzaj.paliwa)
sort(100*(prop.table(auta2012$Rodzaj.paliwa)))
round(100*(prop.table(auta2012$Rodzaj.paliwa)))
100*(prop.table(auta2012$Rodzaj.paliwa))["benzyna"]
100*(prop.table(table(auta2012$Rodzaj.paliwa)))["benzyna"]
install.packages("devtools")
library(devtools)
devtools::install_github("google/CasualImpact")
devtools::install_github("google/CausalImpact")
install.packages("curl")
devtools::install_github("google/CausalImpact")
install.packages("BoomSpikeSlab")
devtools::install_github("google/CausalImpact")
install.packages("bsts")
devtools::install_github("google/CausalImpact")
library(CausalImpact)
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 10
data <- cbind(y, x1)
dim(data)
head(data)
matplot(data, type = "l")
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
library(stringr)
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
for (i in 1:ncol(my_data)){
my_data[,i] <- gsub('\\(at\\)', '@', my_data[,i])
}
head(my_data)
temp <- data.frame(matrix("", ncol = 9, nrow = nrow(my_data)))
##ASSIGN COLNAMES##
colnames(temp) <- c("amazon_merchant_id", "country", "first_name", "last_name", "email", "phone",
"agent_signature", "contact_details_update", "status")
## FIND AVG nchar in each column ##
nchar(my_data)
mean(nchar(my_data))
mean(nchar(my_data[,[my_data]]))
mean(nchar(my_data[,my_data]))
mean(nchar(my_data[my_data,]))
shiny::runApp('shiny')
library(stringr)
## CONTACT UPDATE AMAZON##
##READ FILE##
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
for (i in 1:ncol(my_data)){
my_data[,i] <- gsub('\\(at\\)', '@', my_data[,i])
}
head(my_data)
##CREATE EMPTY DF##
temp <- data.frame(matrix("", ncol = 9, nrow = nrow(my_data)))
##ASSIGN COLNAMES##
colnames(temp) <- c("amazon_merchant_id", "country", "first_name", "last_name", "email", "phone",
"agent_signature", "contact_details_update", "status")
## FIND AVG nchar in each column ##
mean(nchar(my_data[my_data,]))
col_char_len <- c()
find_mean <- function(data){
for (i in 1:ncol(data))
col_char_len[i] <- mean(nchar(as.character(data[,i])), na.rm = TRUE)
return(col_char_len)
}
col_char_len <- find_mean(my_data)
## INDENTIFY AND ASSIGN amazon_merchant_id ##
for (i in 1:length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>13) & (col_char_len[i]<14) &
(substring(toupper(my_data[min(which(!is.na(my_data[,i]))),i]), 1, 1) == "A")) {
temp$amazon_merchant_id <- my_data[,i]
print(1)
cond <- FALSE
} else {
print(2)
}
}
## IDENTIFY AND ASSIGN country ##
for (i in 1: length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>2) & (col_char_len[i]<3)){
temp$country <- my_data[,i]
} else{
}
}
## IDENTIFY AND ASSIGN email ##
num_at <- c()
for (i in 1:ncol(my_data)){
num_at[i] <- table(str_detect(my_data[,i], "@"))["TRUE"]
}
temp$email <- my_data[,which.max(num_at)]
head(temp)
runApp('shiny')
library(stringr)
## CONTACT UPDATE AMAZON##
##READ FILE##
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
for (i in 1:ncol(my_data)){
my_data[,i] <- gsub('\\(at\\)', '@', my_data[,i])
}
head(my_data)
temp <- data.frame(matrix("", ncol = 9, nrow = nrow(my_data)))
colnames(temp) <- c("amazon_merchant_id", "country", "first_name", "last_name", "email", "phone",
"agent_signature", "contact_details_update", "status")
col_char_len <- c()
find_mean <- function(data){
for (i in 1:ncol(data))
col_char_len[i] <- mean(nchar(as.character(data[,i])), na.rm = TRUE)
return(col_char_len)
}
col_char_len <- find_mean(my_data)
col_char_len
library(stringr)
## CONTACT UPDATE AMAZON##
##READ FILE##
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
my_data[my_data == ""] <- NA
for (i in 1:ncol(my_data)){
my_data[,i] <- gsub('\\(at\\)', '@', my_data[,i])
}
head(my_data)
##CREATE EMPTY DF##
temp <- data.frame(matrix("", ncol = 9, nrow = nrow(my_data)))
##ASSIGN COLNAMES##
colnames(temp) <- c("amazon_merchant_id", "country", "first_name", "last_name", "email", "phone",
"agent_signature", "contact_details_update", "status")
## FIND AVG nchar in each column ##
col_char_len <- c()
find_mean <- function(data){
for (i in 1:ncol(data))
col_char_len[i] <- mean(nchar(as.character(data[,i])), na.rm = TRUE)
return(col_char_len)
}
col_char_len <- find_mean(my_data)
## INDENTIFY AND ASSIGN amazon_merchant_id ##
for (i in 1:length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>=13) & (col_char_len[i]<=14) &
(substring(toupper(my_data[min(which(!is.na(my_data[,i]))),i]), 1, 1) == "A")) {
temp$amazon_merchant_id <- my_data[,i]
print(1)
} else {
print(2)
}
}
## IDENTIFY AND ASSIGN country ##
for (i in 1: length(col_char_len)){
if ((!is.nan(col_char_len[i])) & (col_char_len[i]>=2) & (col_char_len[i]<=3)){
temp$country <- my_data[,i]
} else{
}
}
## IDENTIFY AND ASSIGN email ##
num_at <- c()
for (i in 1:ncol(my_data)){
num_at[i] <- table(str_detect(my_data[,i], "@"))["TRUE"]
}
temp$email <- my_data[,which.max(num_at)]
head(temp)
runApp('shiny')
head(build_df(1, 1, my_data))
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
build_df <- function(event, platform, data){
if(event == 1){
##NEW LEADS
columns <- c("company_name", "amazon_merchant_id", "amazon_feedback", "ebay_username"
,"webstore_url", "webstore_traffic", "category", "platform"
,"country", "first_name", "last_name", "phone", "email", "language"
,"lead_source", "lead_status", "marketing_campaign_2", "webstore_platform"
,"predicted_ebay_gmv", "predicted_amazon_gmv", "predicted_webstore_gmv"
,"ebay_item_location", "ebay_posts_to")
df <- data.frame(matrix("", ncol = length(columns), nrow = nrow(data)), stringAsFactors = FALSE)
print(nrow(data))
colnames(df) <- columns
}
return(df)
}
head(build_df(1, 1, my_data))
my_data <- read.csv("C:/Users/Marta Klimaszewska/Documents/shiny files/amazon_contact_update.csv")
build_df <- function(event, platform, my_data){
if(event == 1){
##NEW LEADS
columns <- c("company_name", "amazon_merchant_id", "amazon_feedback", "ebay_username"
,"webstore_url", "webstore_traffic", "category", "platform"
,"country", "first_name", "last_name", "phone", "email", "language"
,"lead_source", "lead_status", "marketing_campaign_2", "webstore_platform"
,"predicted_ebay_gmv", "predicted_amazon_gmv", "predicted_webstore_gmv"
,"ebay_item_location", "ebay_posts_to")
df <- data.frame(matrix("", ncol = length(columns), nrow = nrow(my_data)), stringAsFactors = FALSE)
# print(nrow(data))
colnames(df) <- columns
}
return(df)
}
head(build_df(1, 1, my_data))
runApp('shiny')
runApp('shiny')
runApp('shiny')
columns <- c("company_name", "amazon_merchant_id", "amazon_feedback", "ebay_username"
,"webstore_url", "webstore_traffic", "category", "platform"
,"country", "first_name", "last_name", "phone", "email", "language"
,"lead_source", "lead_status", "marketing_campaign_2", "webstore_platform"
,"predicted_ebay_gmv", "predicted_amazon_gmv", "predicted_webstore_gmv"
,"ebay_item_location", "ebay_posts_to")
length(columns)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
ebay_contact_update <- read.csv("~/shiny files/ebay_contact_update.csv", sep=";")
View(ebay_contact_update)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
